{"version":3,"sources":["Components/Container/container.js","Components/Header/header.js","Components/Cards/Card.js","Components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Header","href","id","currentScore","topScore","Card","prop","onClick","clicked","src","img_src","alt","name","Footer","shuffle","characterArr","i","length","j","Math","floor","random","x","App","state","characters","clickedArray","clickHandler","console","log","Object","toConsumableArray","_this","newTopScore","newCurrentScore","indexOf","push","setState","_this2","this","characterCards","map","character","Cards_Card","key","Header_header","Container_container","Footer_footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5330c1f2.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./container.css\"\n\nconst Container = (props) =>{\n\n    return <div className = \"container\"> \n        <div className = \"jumbotron\"> <h5>Memorize all the Avengers You Have Selected </h5></div>\n        <div className=\"card-holder\">\n                {props.children}\n        </div>\n       \n    </div>\n\n}\n\nexport default Container;","import React from \"react\"\nimport \"./header.css\"\n\nconst Header = (props) => {\n    return <nav>\n    <div className=\"nav-wrapper\">\n      <a href=\"#/\" className=\"brand-logo left\">Avenger Memory Game</a>\n      <span className = \"brand-logo center\">Click on an image to begin</span>\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n        <li>Score: <span>{props.currentScore}</span></li>\n        <li>Top Score: <span>{props.topScore}</span></li>\n      </ul>\n    </div>\n  </nav>\n\n}\n\nexport default Header;","import React from \"react\"\nimport \"./cards.css\"\n\nconst Card = (prop) => {\n    return (\n          <div className=\"picture-card\" onClick = {prop.clicked}>\n              <img src={prop.img_src} alt={prop.name}/>\n          </div>\n\n        )\n\n}\n\nexport default Card","import React from \"react\";\nimport \"./footer.css\"\n\nconst Footer = () => {\n    return <footer className=\"page-footer\">\n    <div className=\"footer-copyright\">\n      <div className=\"container\">\n      Â© 2019 Copyright\n      </div>\n    </div>\n  </footer>\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport Container from \"./Components/Container/container\"\nimport Header from \"./Components/Header/header\"\nimport Card from \"./Components/Cards/Card\"\nimport Footer from \"./Components/Footer/footer\"\nimport './App.css';\nimport characters from \"./characters.json\"\n\n\nconst shuffle = (characterArr) => {\n  for (let i = characterArr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let x = characterArr[i];\n      characterArr[i] = characterArr[j];\n      characterArr[j] = x;\n  }\n  return characterArr;\n}\n\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    topScore: 0,\n    currentScore: 0,\n    clickedArray: []\n  }\n\n  clickHandler = (id) => {\n    console.log(id)\n    let clickedArray = [...this.state.clickedArray];\n    let newTopScore = this.state.topScore;\n    let newCurrentScore = this.state.currentScore;\n\n    if(clickedArray.indexOf(id) === -1){\n      clickedArray.push(id);\n      newCurrentScore++;\n    }\n    \n    else{\n      clickedArray = []\n\n      //Sets new top score if current score is greater\n      if(newCurrentScore > newTopScore) {\n      newTopScore = newCurrentScore;\n      } \n      newCurrentScore = 0;\n\n    }\n    \n    let characterArr = shuffle(this.state.characters)\n    this.setState({\n      characters: characterArr,\n      currentScore: newCurrentScore,\n      topScore: newTopScore,\n      clickedArray: clickedArray\n    })\n      \n  }\n\n  render(){\n    console.log(this.state.clickedArray)\n    let characterCards = this.state.characters.map( character => {\n      \n      return <Card\n      key = {character.id}\n      img_src = {character.img_src}\n      name = {character.name}\n      clicked = {() => {this.clickHandler(character.id)}}\n      />  \n    });\n\n    console.log(this.state.characters)\n    return (\n        <div>\n          <Header\n          topScore = {this.state.topScore}\n          currentScore = {this.state.currentScore}/>\n          <Container>\n            \n             {characterCards}\n          </Container>\n          <Footer/>\n        </div>\n         \n    );\n\n    \n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}